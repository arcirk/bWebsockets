
#Область СлужебныеПроцедурыИФункции

Функция ПустаяСсылкаСтрокой() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";	
КонецФункции

Функция ИдентификаторСтрокой(Идентификатор) Экспорт
	Возврат XMLСтрока(Идентификатор);
КонецФункции

Функция ИдентификаторИзСтроки(СтрокаИдентификатора) Экспорт
	Если СокрЛП(СтрокаИдентификатора) = "" Тогда
		Возврат Новый УникальныйИдентификатор(ПустаяСсылкаСтрокой());
	Иначе
		Возврат Новый УникальныйИдентификатор(СтрокаИдентификатора);
	КонецЕсли;
КонецФункции

Функция ПолучитьСтруктуруЛокальныхНастроек()
	Настройки = Новый Структура;
	Настройки.Вставить("РежимОтладки", Ложь); //для отладки внешней компоненты, можно использовать для явного указания местонахождения файла
	Настройки.Вставить("КаталогОтладки", ""); //каталог с бинарными файлами внешней компоененты
	Настройки.Вставить("ИспользоватьДанныеПользователя", Истина); //Будет использоваться текущее имя пользователя и идентификатор
	//в качестве данных авторизации на сервере, //sha1 пары НРЕг(ИмяПользователя) + Строка(УникальныйИдентификатор)
	Настройки.Вставить("ИмяПользователя", ""); //имя пользователя, указывается в случае если не используется данные текущего пользователя
	Настройки.Вставить("ХешПользователя", ""); //sha1 пары НРЕг(ИмяПользователя) + Пароль
	Настройки.Вставить("ПодключатсяАвтоматически", Ложь); //Автоматическое подключение при запуске
	Настройки.Вставить("ВосстановитьСоединениеПриРазрыве", Ложь); //Автоматическое подключение при запуске
	Возврат Настройки;
КонецФункции

Функция ПолучитьСтруктуруГлобальныхНастроек() Экспорт
	Настройки = Новый Структура( );
	Настройки.Вставить("АдресСервера", "ws://127.0.0.1:8080");
	Настройки.Вставить("ТребуетсяАвторизацияНаСервере", Ложь);
	Настройки.Вставить("HttpСервис", "");
	Настройки.Вставить("HttpСервисПользователь", "");
	Настройки.Вставить("HttpСервисПароль", "");
	Настройки.Вставить("РабочийКаталогСервера", "");
	Настройки.Вставить("DavСервис", "");
	Настройки.Вставить("DavСервисПользователь", "");
	Настройки.Вставить("DavСервисПароль", "");
	Настройки.Вставить("РазрешитьОтложеннуюАвторизацию", Ложь);	
	Возврат Настройки;
КонецФункции

Функция ПолучитьЛокальныеНастройкиКлиента(ВыбранныйПользователь = Неопределено) Экспорт
	
	ЛокальныеНастрокйки = ПолучитьСтруктуруЛокальныхНастроек();
	
	КлючОбъекта = "WebCore";
	КлючНастроек = "Настройки";
	
	Если ВыбранныйПользователь = Неопределено Тогда
		ИмяПользователя = ИмяПользователя();
	Иначе
		ИмяПользователя = ВыбранныйПользователь.Код;
	КонецЕсли;

    _ЛокальныеНастрокйки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта,КлючНастроек,,ИмяПользователя);

	Если НЕ _ЛокальныеНастрокйки = Неопределено Тогда
		Для Каждого Элемент Из _ЛокальныеНастрокйки Цикл
			Если ЛокальныеНастрокйки.Свойство(Элемент.Ключ) Тогда
				ЛокальныеНастрокйки[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;

	Возврат ЛокальныеНастрокйки;
	
КонецФункции

Функция ПолучитьНастройкиСервера() Экспорт
	
	мНастройки = ПолучитьСтруктуруГлобальныхНастроек();
	мНастройки.АдресСервера = Константы.АдресСервера.Получить();
	мНастройки.ТребуетсяАвторизацияНаСервере = Константы.ТребуетсяАвторизацияНаСервере.Получить();
	мНастройки.РабочийКаталогСервера = Константы.РабочийКаталогСервера.Получить();
	Возврат мНастройки;
	
КонецФункции

Функция ПолучитьХешСтандартногоПароля(ВыбранныйПользователь = Неопределено) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ВыбранныйПользователь <> Неопределено Тогда
		ТекущийПользователь = ВыбранныйПользователь;
	КонецЕсли;
	
	ИмяПользователя = "";
	ИдентификаторПользователя = "";
	Если ЗначениеЗаполнено(ТекущийПользователь) ТОгда
		ИмяПользователя = ТекущийПользователь.Код;
		ИдентификаторПользователя = XMLСтрока(ТекущийПользователь);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя());
		ИмяПользователя = ИмяПользователя();
		ИдентификаторПользователя = XMLСтрока(ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	ИсходнаяСтрока = ВРег(ИмяПользователя) + ИдентификаторПользователя;
	ХешПользователя = НРЕг(ПолучитьХешСуммы(ИсходнаяСтрока));
	
	Возврат ХешПользователя;
	
КонецФункции

Функция ИдентификаторПользователяСтрокой() Экспорт
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ИдентификаторПользователя = XMLСтрока(ТекущийПользователь);
	Возврат ИдентификаторПользователя;
КонецФункции

Функция ИмяТекущегоПользователя() Экспорт
	Если ЗначениеЗаполнено(Пользователи.ТекущийПользователь()) Тогда
		Возврат СокрЛП(Пользователи.ТекущийПользователь().Наименование);
	Иначе
		Возврат ИмяПользователя();
	КонецЕсли;
КонецФункции

Функция ПолучитьХешСуммы(ИсходнаяСтрока)
	ХешированиеДанных  = Новый ХешированиеДанных (ХешФункция.SHA1) ;
 	ХешированиеДанных.Добавить(ИсходнаяСтрока);
 	Возврат ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма)
КонецФункции

Процедура Ошибка(ЗаголовокОшибки, ОписаниеОшибки) Экспорт
	ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Ошибка, , , ЗаголовокОшибки + ": " + ОписаниеОшибки)
КонецПроцедуры

Процедура Лог(ЗаголовокСообщения, ТекстСообщения) Экспорт
	ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Информация, , , ЗаголовокСообщения + ": " + ТекстСообщения)
КонецПроцедуры

Функция СтрокаВBase64(Знач источник) Экспорт
	
	ДвоичныеДанные  = ПолучитьДвоичныеДанныеИзСтроки(источник);
	Результат = ДвоичныеДанныеBase64(ДвоичныеДанные);
	
	Возврат Результат;
	
КонецФункции

Функция ДвоичныеДанныеBase64(ДвоичныеДанные) Экспорт
	
	Base64 = Base64Строка(ДвоичныеДанные);
	Base64 = СтрЗаменить(Base64, Символы.ПС, "");
	Base64 = СтрЗаменить(Base64, Символы.ВК, "");
	
	Возврат Base64;
	
КонецФункции

Функция ОбработатьОтветСервера(Данные) Экспорт

	ОтветСервера_ = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Данные));
	Если ОтветСервера_ = "" И СокрЛП(Данные) <> "" Тогда
		ОтветСервера_ = Данные;
	КонецЕсли;
		
	ОтветСервера = ПрочитатьОтветСервера(ОтветСервера_);
	Возврат ОтветСервера;

КонецФункции

Функция ПрочитатьОтветСервера(ОтветСервера) Экспорт
	СтруктураДанных = Неопределено;
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСервера);
		СтруктураДанных = ПрочитатьJSON(ЧтениеJSON,,,);		
	Исключение
		СтруктураДанных = Новый Структура("Ошибка,ОписаниеОшибки", "МенеджерВебСокетВызовСервера::ПрочитатьОтветСервера", ОписаниеОшибки());
	КонецПопытки;

	Возврат СтруктураДанных;
КонецФункции

Функция ОтветСервераПолучитьЗначение(ОтветСервера, Свойство, ЗначениеПоУмолчанию = Неопределено)  Экспорт
	Если ТипЗнч(ОтветСервера) = Тип("Структура") Или ТипЗнч(ОтветСервера) = Тип("Соответствие") Тогда
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			Если НЕ ОтветСервера.Свойство(Свойство) Тогда
				Возврат ЗначениеПоУмолчанию;
			Иначе
				Возврат ОтветСервера[Свойство];
			КонецЕсли;
		Иначе 
			Возврат ?( ОтветСервера[Свойство], ЗначениеПоУмолчанию, ОтветСервера[Свойство]);
		КонецЕсли;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
КонецФункции

Процедура ОтветСервераУстановитьЗначение(ОтветСервера, Свойство, Значение) Экспорт
	Если ОтветСервера.Свойство(Свойство) Тогда
		ОтветСервера[Свойство] = Значение;
	КонецЕсли;
КонецПроцедуры

Функция ОбъектВJson(Объект) Экспорт
	Попытка
		Запись = Новый ЗаписьJSON();
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Объект);
		Возврат Запись.Закрыть();
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

Функция СкопироватьКлючиСтруктуры(ИсходнаяСтруктура) Экспорт
	Результат = Новый Структура();
	Для Каждого Элемент Из ИсходнаяСтруктура Цикл
		Результат.Вставить(Элемент.Ключ);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СериализоватьОбъект(Объект, ИдентификаторУстройства) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ТОгда
		ВызватьИсключение "Объект не записан!";
	КонецЕсли;
	МетаданныеОбъекта = Объект.Метаданные();
	СтандартныеРеквизиты = Новый Структура();
	ТабличныеЧасти = Новый Массив;
	СтандартныеРеквизиты.Вставить("first", МетаданныеОбъекта.Имя);
	СтандартныеРеквизиты.Вставить("second", МетаданныеОбъекта.Синоним);
	СтандартныеРеквизиты.Вставить("ref", XMLСтрока(Объект.Ссылка));
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		СтандартныеРеквизиты.Вставить("date", Число(Формат(Объект.Дата - дата(1970,1,1,1,0,0), "ЧГ=0")));
	КонецЕсли;
	СтандартныеРеквизиты.Вставить("xml_type", XMLТипЗнч(Объект.Ссылка).ИмяТипа);
	СтандартныеРеквизиты.Вставить("device_id", XMLСтрока(ИдентификаторУстройства));
	
	СоответствияПолей = ПолучитьСоответствияПолей();
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		МассивСтрок = Новый Массив;
		Для Каждого ТекСтрока Из Объект[ТабличнаяЧасть.Имя] Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("first", ТабличнаяЧасть.Имя);
			СтруктураСтроки.Вставить("second", ТабличнаяЧасть.Имя);
			ИдентификаторСтроки = Неопределено;
			Если ТабличнаяЧасть.Реквизиты.Найти("КлючСтроки") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ТекСтрока.КлючСтроки) ТОгда
					ИдентификаторСтроки = ТекСтрока.КлючСтроки;
				Иначе
					ИдентификаторСтроки = Новый УникальныйИдентификатор();
				КонецЕсли;
			Иначе
				ИдентификаторСтроки = Новый УникальныйИдентификатор();
			КонецЕсли;	
		
			СтруктураСтроки.Вставить("ref", XMLСтрока(ИдентификаторСтроки));
			СтруктураСтроки.Вставить("parent", XMLСтрока(Объект.Ссылка));
			
			Для Каждого ТекРеквизит Из МетаданныеОбъекта.ТабличныеЧасти.Реквизиты Цикл
				ИмяПоля = ПолучитьКлючСоответствияПоЗначению(ТекРеквизит.Имя, СоответствияПолей);
				Если ИмяПоля <> Неопределено Тогда
					СтруктураСтроки.Вставить(ИмяПоля, ТекСтрока[ТекРеквизит.Имя]);
				КонецЕсли;
			КонецЦикла;

			МассивСтрок.Добавить(СтруктураСтроки);		
		КонецЦикла;
		
		ТабличныеЧасти.Добавить(Новый Структура("name, strings", ТабличнаяЧасть.Имя, МассивСтрок));
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("StandardAttributes", СтандартныеРеквизиты);
	Результат.Вставить("TabularSections", ТабличныеЧасти);
	
	Возврат Результат;
	
КонецФункции

Функция ДесериализоватьОбъект(СтруктураОбъекта) Экспорт

	Если НЕ ТипЗнч(СтруктураОбъекта) = Тип("Структура") Тогда
		ВызватьИсключение "Не верные входящие данные!";
	КонецЕсли;
	
	//Далее явно указываем ключи для вызова исключения если структура не верная
	
	ТипОбъекта = Тип(ПолучитьТип(СтруктураОбъекта.StandardAttributes.xml_type));
	Если ЭтоПростойТип(ТипОбъекта) Тогда
		ВызватьИсключение "Не является объектом!"
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
	СсылкаНаОбъект = Неопределено;
	ТекОбъект = Неопределено;
	ИмяКлюча = Неопределено;
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		СсылкаНаОбъект = Документы[МетаданныеОбъекта.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.StandardAttributes.ref));
		ТекОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		Если ТекОбъект = Неопределено Тогда
			ТекОбъект = Документы[МетаданныеОбъекта.Имя].СоздатьДокумент();
			ТекОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
		ИмяКлюча = "Номер";
		Если СтруктураОбъекта.StandardAttributes.date = 0 ТОгда
			ТекОбъект.Дата = ТекущаяДата();
		Иначе
			ТекОбъект.Дата = Дата(1970,1,1,1,0,0) + СтруктураОбъекта.StandardAttributes.date;
		КонецЕсли;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда 
		СсылкаНаОбъект = Справочники[МетаданныеОбъекта.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.StandardAttributes.ref));
		ТекОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		Если ТекОбъект = Неопределено Тогда
			ТекОбъект = Справочники[МетаданныеОбъекта.Имя].СоздатьЭлемент();
			ТекОбъект.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
		ИмяКлюча = "Код";
	Иначе
		ВызватьИсключение "Тип не поддерживается!";
	КонецЕсли;
	
	ТекОбъект[ИмяКлюча] = СтруктураОбъекта.StandardAttributes.number;
	Если МетаданныеОбъекта.Реквизиты.Найти("Устройство") <> Неопределено ТОгда
		ТекОбъект.Устройство = Справочники.УстройстваИКомпьютеры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.StandardAttributes.device_id));
	КонецЕсли;
	
	мТабличныеЧасти = СтруктураОбъекта.TabularSections;
	Для Каждого ТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ТекОбъект[ТЧ.Имя].Очистить();	
	КонецЦикла;
	Если ТипЗнч(мТабличныеЧасти) = Тип("Массив") И мТабличныеЧасти.Количество() > 0 ТОгда
		СоответствияПолей = ПолучитьСоответствияПолей();
		Для Каждого ТекТЧ Из мТабличныеЧасти Цикл
			ИмяТЧ = ТекТЧ.name;
			МассивСтрок = ТекТЧ.strings;
			Если ТипЗнч(МассивСтрок) = Тип("Массив") И МассивСтрок.Количество() > 0 И НЕ ПустаяСтрока(ИмяТЧ) ТОгда
				Для Каждого ТекСтрока Из МассивСтрок Цикл
					НоваяСтрока = ТекОбъект[ИмяТЧ].Добавить();
					Для Каждого Элемент Из ТекСтрока Цикл
						ИмяПоля = СоответствияПолей.Получить(Элемент.Ключ);
						Если ИмяПоля <> Неопределено И МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти(ИмяПоля) <> Неопределено ТОгда
							//В этой конфигурации только простые типы
							НоваяСтрока[ИмяПоля] = Элемент.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекОбъект;
	
КонецФункции

Функция ПолучитьТип(_xmlТип) Экспорт
	мТип = СтрЗаменить(_xmlТип, "decimal", "Число");
	мТип = СтрЗаменить(мТип, "Time", "");
	Если СокрЛП(мТип) = "" Тогда
		мТип = "Date";
	КонецЕсли;
	Возврат мТип;
КонецФункции

Функция ПолучитьСоответствияПолей() Экспорт
	Результат = Новый Соответствие();
	Результат.Вставить("_id", "id");
	Результат.Вставить("first", "Имя");
	Результат.Вставить("second", "Синоним");
	Результат.Вставить("ref", "Ссылка");
	Результат.Вставить("cache", "Кэш");
	Результат.Вставить("number", "Номер");
	Результат.Вставить("date", "Дата");
	Результат.Вставить("xml_type", "XmlТип");
	Результат.Вставить("device_id", "Устройство");
	Результат.Вставить("price", "Цена");
	Результат.Вставить("quantity", "Количество");
	Результат.Вставить("barcode", "Штрихкод");
	Результат.Вставить("parent", "Владелец");
	Результат.Вставить("deviceType", "ТипУстройства");
	Результат.Вставить("workplace", "РабочееМесто");
	Результат.Вставить("workplace", "РабочееМесто");
	Результат.Вставить("price_type", "ТипЦен");
	Результат.Вставить("warehouse", "Склад");
	Результат.Вставить("subdivision", "Подразделение");
	Результат.Вставить("organization", "Организация");
	Результат.Вставить("server", "Сервер");
	Результат.Вставить("is_group", "ЭтоГруппа");
	Результат.Вставить("deletion_mark", "ПометкаУдаления");
	Результат.Вставить("performance", "Представление");
	Результат.Вставить("message", "Сообщение");
	Результат.Вставить("token", "Токен");
	Результат.Вставить("content_type", "ТипКонтента");
	Результат.Вставить("unread_messages", "НеПрочитанныеСообщения");
	Возврат Результат;
КонецФункции

Функция ПолучитьКлючСоответствияПоЗначению(Значение, ВыбСоответствие) Экспорт
	Для Каждого ТекЭлемент Из ВыбСоответствие Цикл
		Если Значение = ТекЭлемент.Значение Тогда
			Возврат ТекЭлемент.Ключ;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция ЭтоПростойТип(ТипЭлемента) Экспорт
	
	ЭтоПростойТип = Ложь;
	//ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("Строка")
		ИЛИ ТипЭлемента = Тип("Число")
		ИЛИ ТипЭлемента = Тип("Дата") 
		ИЛИ ТипЭлемента = Тип("Булево")
		ИЛИ ТипЭлемента = Тип("УникальныйИдентификатор")	
		Тогда
		ЭтоПростойТип = Истина;
	КонецЕсли;
	
	Возврат ЭтоПростойТип;
	
КонецФункции

#КонецОбласти



