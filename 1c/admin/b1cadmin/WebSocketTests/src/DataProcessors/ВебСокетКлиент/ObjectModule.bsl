//+Аркадий@, 2022-08-31 01:51:37
//+/Аркадий@, 2022-08-31 01:51:37

#Если Клиент ИЛИ ТонкийКлиент ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение ТОгда
	
#Область ОписаниеПеременных

//@skip-check module-accessibility-at-client
Перем мВебСокет;
//@skip-check module-accessibility-at-client
Перем мИдентификаторФормыКакИсточникСобытия Экспорт;
//@skip-check module-accessibility-at-client
Перем мИмяПриложения Экспорт;
//@skip-check module-accessibility-at-client
Перем мОтключитьПубличныеОповещения Экспорт;
//@skip-check module-accessibility-at-client
Перем мПриложенияДляОповещений Экспорт;
//@skip-check module-accessibility-at-client
Перем мЛокальныеКлиенты Экспорт;
//@skip-check module-accessibility-at-client
Перем мОписаниеОповещенияОПодключении;
//@skip-check module-accessibility-at-client
Перем мОповещениеООшибке;
//@skip-check module-accessibility-at-client
Перем мОчередьОповещений;
//@skip-check module-accessibility-at-client
Перем мИдентификаторУзла;
//@skip-check module-accessibility-at-client
Перем мСтандартныйОбработчикШтрихкода;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодключенныеФормы()
	
	СтруктураЭлементов = Новый Структура;
	
	мКолонки = Новый Массив;
	мКолонки.Добавить("uuid");
	мКолонки.Добавить("uuid_user");
	мКолонки.Добавить("uuid_form");
	мКолонки.Добавить("user_name");
	мКолонки.Добавить("document_name");
	
	мСтроки = Новый Массив;
	Для Каждого ТекКлиент Из мЛокальныеКлиенты Цикл
		Форма = ТекКлиент.Значение["Форма"];
		//@skip-check structure-consructor-too-many-keys
		мСтроки.Добавить(Новый Структура("uuid, uuid_user, uuid_form, user_name, document_name", мВебСокет.ИдентификаторСессии(), XMLСтрока(Пользователи.ТекущийПользователь()), XMLСтрока(ТекКлиент.Ключ), СокрЛП(Пользователи.ТекущийПользователь()), СокрЛП(Форма.ЭтотОбъект)));
	КонецЦикла;
	
	СтруктураЭлементов.Вставить("columns", мКолонки);
	СтруктураЭлементов.Вставить("rows",    мСтроки);

	Возврат СтруктураЭлементов;
	
КонецФункции

Функция ПодключитьКлиента(ОписаниеОповещенияОПодключении = Неопределено) Экспорт
		
	Если НЕ ЕстьПраваНаПодключение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если мВебСокет = Неопределено Тогда   
		Попытка
			мВебСокет = Новый("AddIn.WebCore.WebSocketClient");
		Исключение 
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Если мВебСокет.Запущен() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;  
		
	ПараметрыКлиента = ПривилегированныйМодуль.ПолучитьПараметрыУчетнойЗаписи();
	
	Если ПараметрыКлиента = Неопределено Тогда
		ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Ошибка,,, "Ошибка подключения компоненты! Не найдены параметры пользователя!");
		Возврат Ложь;
	КонецЕсли;
	
	Если мВебСокет = Неопределено Тогда
		ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Ошибка, ,,"Ошибка подключения к серверу взаимодействия. Компонента не загружена!");
		Возврат Ложь;
	КонецЕсли;
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		мВебСокет.УстановитьПараметрыРабочегоМеста(XMLСтрока(РабочееМесто), СокрЛП(Пользователи.ТекущийПользователь()) + "(" + СокрЛП(РабочееМесто.Наименование) + ")");
	КонецЕсли;
	
	мВебСокет.ОтключитьПубличныеОповещения         = мОтключитьПубличныеОповещения;
	мВебСокет.ПриложенияДляОповещений              = мПриложенияДляОповещений;
	мВебСокет.УстановитьИмяПриложения(мИмяПриложения);
	мВебСокет.ИдентификаторФормыКакИсточникСобытия = мИдентификаторФормыКакИсточникСобытия;
	мВебСокет.СтандартныйОбработчикШтрихкода       = мСтандартныйОбработчикШтрихкода;
	мОписаниеОповещенияОПодключении                = ОписаниеОповещенияОПодключении;
	Если мОписаниеОповещенияОПодключении = Неопределено Тогда
		мОписаниеОповещенияОПодключении = Новый ОписаниеОповещения("ПриПодключении", ЭтотОбъект);
	КонецЕсли;
	
	мВебСокет.Открыть(арс_РаботаСДаннымиСервер.ПолучитьURLВебСокетСервера(), СокрЛП(ПараметрыКлиента.ИмяПользователяWindows), СокрЛП(ПараметрыКлиента.Пароль), XMLСтрока(Пользователи.ТекущийПользователь().УникальныйИдентификатор()));
	
	Возврат Истина;
	
КонецФункции

Процедура ПодключитьФорму(Форма, ОповещениеОСообщении = Неопределено, ОповещениеООшибке = Неопределено) Экспорт
		
	ИдентификаторКлиента = Новый УникальныйИдентификатор();
	
	//@skip-check empty-except-statement
	Попытка
		ИдентификаторКлиента = Форма.УникальныйИдентификатор;
	Исключение
	КонецПопытки;
	
	ПодключитьКлиента();
	
	МетаданныеОбъекта = Форма.Метаданные();
	
	мЛокальныеКлиенты.Вставить(ИдентификаторКлиента, Новый Структура("ОповещениеОСообщении,ОповещениеООшибке,Форма,МетаданныеОбъекта", ОповещениеОСообщении, ОповещениеООшибке, Форма, МетаданныеОбъекта));
	
	Если Подключен() Тогда
        ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("message",        "NotifyFormOpen");
		ПараметрыКоманды.Вставить("app_name",       мПриложенияДляОповещений);
		ПараметрыКоманды.Вставить("disable_return", Истина);
		ПараметрыОповещения    = Новый Структура("uuid_form",                                XMLСтрока(ИдентификаторКлиента));
		СтрПараметрыОповещения = арс_РаботаСJSON.СформироватьСтрокуJSON(ПараметрыОповещения, , Истина);
		ПараметрыКоманды.Вставить("param", СтрПараметрыОповещения);
		мВебСокет.КомандаСерверу("notify", арс_РаботаСJSON.СформироватьСтрокуJSON(ПараметрыКоманды), XMLСтрока(ИдентификаторКлиента));
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПраваНаПодключение()
	Возврат УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.РарешитьИспользованиеСервераВзаимодействия, Ложь) И 
		УправлениеПользователями.ПолучитьЗначениеПрава(ПланыВидовХарактеристик.ПраваПользователей.ПодключатьВременногоКлинентаПриРаботеС_ТСД, Ложь);
КонецФункции

Функция Подключен() Экспорт
	Если мВебСокет <> Неопределено Тогда
		Возврат мВебСокет.Запущен();
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура Закрыть(НеОповещать = Истина) Экспорт
	Если мВебСокет <> Неопределено Тогда
		мВебСокет.Закрыть(НеОповещать);
	КонецЕсли;
КонецПроцедуры

Функция ОбработатьОтветСервера(Событие, Данные)
	
	ОтветСервера = арс_РаботаСJSON.ПрочитатьОтветСервера(Данные);
	Если ОтветСервера.Свойство("Ошибка") Тогда
		Если мОповещениеООшибке <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(мОповещениеООшибке, Новый Структура("Команда, ОписаниеОшибки", "Парсинг ответа", ОтветСервера.ОписаниеОшибки));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	Результат = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ОтветСервера, "result",  "success");
	Команда   = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ОтветСервера, "command", "message");
	Сообщение = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ОтветСервера, "message", "");
	
	Если Результат = "error" Тогда
		//ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Ошибка, ,, Событие + ": " + Сообщение);
		Если мОповещениеООшибке <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(мОповещениеООшибке, Новый Структура("Команда, ОписаниеОшибки", Команда, Сообщение));
			Возврат Неопределено;
		Иначе
			ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПриОшибке", ЭтотОбъект), Новый Структура("Команда, ОписаниеОшибки", Команда, Сообщение));
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Результат,Команда,Сообщение,ОтветСервера", Результат, Команда, Событие, ОтветСервера);

КонецФункции

Функция УбратьИзОчереди(ИдентификаторКлиента, Команда)
	
	мТекущиеОповещения = мОчередьОповещений.Получить(ИдентификаторКлиента);
	Если мТекущиеОповещения = Неопределено ИЛИ мТекущиеОповещения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементОчереди = Неопределено;
	Счетчик = 0;
	Для Каждого ЭлементОчереди Из мТекущиеОповещения Цикл
		Если ЭлементОчереди.Получить(Команда) <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если ЭлементОчереди <> Неопределено Тогда
		мТекущиеОповещения.Удалить(Счетчик);
	КонецЕсли;
	
	Если мТекущиеОповещения.Количество() = 0 Тогда
		мОчередьОповещений.Удалить(ИдентификаторКлиента);
	КонецЕсли;
	
	Возврат ЭлементОчереди;
	
КонецФункции

Процедура ОчиститьОчередь(ИдентификаторКлиента = Неопределено)
	Если ИдентификаторКлиента = Неопределено Тогда
		мОчередьОповещений.Очистить();
	Иначе
		мТекущиеОповещения = мОчередьОповещений.Получить(ИдентификаторКлиента);
		Если мТекущиеОповещения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		мОчередьОповещений.Удалить(ИдентификаторКлиента);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработатьВнешнееСобытиие(Источник, Событие, Данные) Экспорт
	
	Если Источник = "WebSocketClient" Тогда
		
		ПараметрыСообщения = ОбработатьОтветСервера(Событие, Данные);
		
		Если НЕ ПараметрыСообщения = Неопределено Тогда
			Если ПараметрыСообщения.Команда = "set_client_param" И ПараметрыСообщения.Результат = "success" Тогда				
				Если мОписаниеОповещенияОПодключении <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(мОписаниеОповещенияОПодключении, Новый Структура("Команда, Результат, Сообщение", "set_client_param", "success", СтрШаблон("Успешное подключение к серверу! %1 %2", мВебСокет.url, ТекущаяДата())));
				КонецЕсли;
			ИначеЕсли ПараметрыСообщения.Команда = "get_list_forms" Тогда 
				ПараметрыКоманды = арс_РаботаСJSON.ПрочитатьОтветСервера(ПараметрыСообщения.ОтветСервера.param);
				Если ТипЗнч(ПараметрыКоманды) = Тип("Структура") Тогда
					АктивныеФормы = ПодключенныеФормы();
					КомандаКлиенту(мВебСокет.ИдентификаторСессии(), ПараметрыКоманды.recipient, "list_forms", арс_РаботаСJSON.СформироватьСтрокуJSON(АктивныеФормы));
				КонецЕсли;
			ИначеЕсли ПараметрыСообщения.Команда = "get_document_info" Тогда
				ОбработатьЗапросИнформацияООбъекте(ПараметрыСообщения.ОтветСервера);
			Иначе 
				ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Информация, ,, "Получена необработанная команда: " + ПараметрыСообщения.Команда);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если СтрДлина(Источник) <> 36 Тогда //ограничим по длине  идентификатора
			Возврат;
		КонецЕсли; 
		
		ИдентификаторКлиента = Неопределено;
		Попытка
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Источник);
		Исключение
			Возврат;	
		КонецПопытки;
		
		Клиент = мЛокальныеКлиенты.Получить(ИдентификаторКлиента);
		
		Если Клиент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыСообщения =  ОбработатьОтветСервера(Событие, Данные);

		Если НЕ ПараметрыСообщения = Неопределено Тогда 
			
			Если ПараметрыСообщения.Команда = "get_active_users" Тогда
				ОповещениеОВыполнении = УбратьИзОчереди(ИдентификаторКлиента,  "get_active_users");
				Если ОповещениеОВыполнении <> Неопределено Тогда
					Оповещение = ОповещениеОВыполнении.Получить(ПараметрыСообщения.Команда);
					Если Оповещение <> Неопределено Тогда
						ВыполнитьОбработкуОповещения(Оповещение, ПараметрыСообщения);
					КонецЕсли;
				Иначе
					ОповещениеОВыполнении = Клиент.ОповещениеОСообщении;
					Если ОповещениеОВыполнении <> Неопределено Тогда
						 ВыполнитьОбработкуОповещения(ОповещениеОВыполнении, ПараметрыСообщения);
					 Иначе
						 ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПриПолученииСообщения", ЭтотОбъект), ПараметрыСообщения);
					КонецЕсли;
				КонецЕсли;   
			ИначеЕсли ПараметрыСообщения.Команда = "barcode" Тогда		
				ОповещениеОВыполнении = Клиент.ОповещениеОСообщении; 
				ПараметрыКоманды = арс_РаботаСJSON.ПрочитатьОтветСервера(ПараметрыСообщения.ОтветСервера.param);
				ПараметрыКоманды.Вставить("Команда", ПараметрыСообщения.Команда);
				Если ОповещениеОВыполнении <> Неопределено Тогда
					 ВыполнитьОбработкуОповещения(ОповещениеОВыполнении, ПараметрыКоманды);
				 Иначе
					 ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПриПолученииСообщения", ЭтотОбъект), ПараметрыКоманды);
				КонецЕсли;
			ИначеЕсли ПараметрыСообщения.Команда = "get_list_forms" Тогда
				//success
			ИначеЕсли ПараметрыСообщения.Команда = "notify" Тогда
				//success
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//
	//ОтветСервера = арс_РаботаСJSON.ПрочитатьОтветСервера(Данные);
	//Если ОтветСервера.Свойство("Ошибка") Тогда
	//	Если мОповещениеООшибке <> Неопределено Тогда
	//		ВыполнитьОбработкуОповещения(мОповещениеООшибке, Новый Структура("Команда,ОписаниеОшибки", "Парсинг ответа", ОтветСервера.ОписаниеОшибки));
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Результат = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ОтветСервера, "result",  "success");
	//Команда   = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ОтветСервера, "command", "message");
	//Сообщение = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ОтветСервера, "message", "");

	//Если Результат = "error" Тогда
	//	ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Ошибка, ,, Событие + ": " + Сообщение);
	//	Если мОповещениеООшибке <> Неопределено Тогда			
	//		ВыполнитьОбработкуОповещения(мОповещениеООшибке, Новый Структура("Команда,ОписаниеОшибки", Команда, Сообщение));
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Событие = "barcode" Тогда		
	//	СтруктураШтрихкод = арс_РаботаСJSON.ПрочитатьОтветСервера(ОтветСервера.param);
	//	Если мОповещениеОСообщении <> Неопределено Тогда
	//		ВыполнитьОбработкуОповещения(мОповещениеОСообщении, Новый Структура("Команда, ПараметрыКоманды", Событие, СтруктураШтрихкод));
	//	КонецЕсли;
	//ИначеЕсли Событие = "set_document_name" ТОгда
	//	ПриИзмененииТекущегоДокуметаДокумента();
	//ИначеЕсли Событие = "command_to_client" ТОгда
	//	ПриПолученииОтвтетаОтКлиента();
	//ИначеЕсли Событие = "get_document_info" ТОгда 
	//	ОбработатьЗапросИнформацияООъетке(ОтветСервера);
	//ИначеЕсли Событие = "set_client_param"  Тогда
	//	Если мОповещениеОСоединении <> Неопределено Тогда
	//		ВыполнитьОбработкуОповещения(мОповещениеОСоединении, Новый Структура("Команда, Результат", Событие, "Успешное подключение к серверу"));
	//	КонецЕсли;
	//Иначе
	//	ВыполнитьОбработкуОповещения(мОповещениеОСоединении, Новый Структура("Команда, ПараметрыКоманды", Событие, ОтветСервера));
	//КонецЕсли;

КонецПроцедуры

Процедура ПриИзмененииТекущегоДокуметаДокумента()
	//
КонецПроцедуры

Процедура ОбработатьЗапросИнформацияООбъекте(ОтветСервера)
	
	ПараметрыЗапроса   = арс_РаботаСJSON.ПрочитатьОтветСервера(арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ОтветСервера, "param", Неопределено));
	Если ПараметрыЗапроса = Неопределено Тогда  
		Возврат;
	КонецЕсли;
	
	мИдентификаторКлиента = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ПараметрыЗапроса, "document_id", Неопределено);
	
	Если мИдентификаторКлиента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИдентификаторКлиента = Новый УникальныйИдентификатор(мИдентификаторКлиента);	
	Исключение                                                                      
		Возврат;
	КонецПопытки;
	
	Клиент = мЛокальныеКлиенты.Получить(ИдентификаторКлиента); 
	
	Если Клиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Клиент.МетаданныеОбъекта;
	СсылкаНаОбъект = Неопределено;
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		СсылкаНаОбъект = Клиент.Форма.ДокументОбъект.Ссылка; 
	КонецЕсли;

	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	ЭтоНовый = СсылкаНаОбъект.Пустая();
	
	Ответ = арс_РаботаСДаннымиКлиент.ПолучитьИнформациюОДокументе(СсылкаНаОбъект, ЭтоНовый);      
	
	Получатель = арс_РаботаСJSON.ОтветСервераПолучитьЗначение(ПараметрыЗапроса, "recipient", Неопределено);
	
	Если Получатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = арс_РаботаСJSON.СформироватьСтрокуJSON(Ответ);
	мВебСокет.КомандаКлиенту(XMLСтрока(Получатель), "document_info", Параметры, XMLСтрока(ИдентификаторКлиента));
	
КонецПроцедуры

Процедура ПриПолученииОтвтетаОтКлиента()
	//
КонецПроцедуры

Процедура ПриПодключении(Результат, ДополнительныеСвойства) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Информация,,, Результат.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтключении(Результат, ДополнительныеСвойства) Экспорт
	
КонецПроцедуры   

Процедура ПриОшибке(Результат, ДополнительныеСвойства) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("WebSocketClient", УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
	
КонецПроцедуры          

Процедура ПриПолученииСообщения(Результат, ДополнительныеСвойства) Экспорт
	
	
КонецПроцедуры

Процедура ПриЗакрытии(ИдентификаторКлиента) Экспорт
	ОчиститьОчередь(ИдентификаторКлиента);
	Если мЛокальныеКлиенты.Получить(ИдентификаторКлиента) <> Неопределено Тогда
		мЛокальныеКлиенты.Удалить(ИдентификаторКлиента);
	КонецЕсли;
	Если Подключен() Тогда
        ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("message",        "NotifyFormLeave");
		ПараметрыКоманды.Вставить("app_name",       мПриложенияДляОповещений);
		ПараметрыКоманды.Вставить("disable_return", Истина);
		ПараметрыОповещения    = Новый Структура("uuid_form",                                XMLСтрока(ИдентификаторКлиента));
		СтрПараметрыОповещения = арс_РаботаСJSON.СформироватьСтрокуJSON(ПараметрыОповещения, , Истина);
		ПараметрыКоманды.Вставить("param", СтрПараметрыОповещения);
		мВебСокет.КомандаСерверу("notify", арс_РаботаСJSON.СформироватьСтрокуJSON(ПараметрыКоманды), XMLСтрока(ИдентификаторКлиента));
	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗаписи(Форма) Экспорт
	//
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииКомпоненты
Процедура КомандаКлиенту(ИдентфикаторКлиента, Получатель, Команда, ПараметрыКоманды, ОповещениеОВыполнении = Неопределено)  Экспорт
	
	Если НЕ Подключен() Тогда
		Возврат;
	КонецЕсли;
	
	Если мЛокальныеКлиенты.Получить(ИдентфикаторКлиента) <> Неопределено И ОповещениеОВыполнении <> Неопределено Тогда
		мОповещенияКлиента = мОчередьОповещений.Получить(ИдентфикаторКлиента);
		Если мОповещенияКлиента = Неопределено Тогда
			мОповещенияКлиента = Новый Массив;
		КонецЕсли;
		ЭлементОчереди = Новый Соответствие;
		ЭлементОчереди.Вставить(Команда, ОповещениеОВыполнении);
		мОповещенияКлиента.Добавить(ЭлементОчереди);
	КонецЕсли;
	
	мВебСокет.КомандаКлиенту(Получатель, Команда, ПараметрыКоманды, XMLСтрока(ИдентфикаторКлиента));
	
КонецПроцедуры

Процедура КомандаСерверу(ИдентфикаторКлиента, Команда, ПараметрыКоманды, ОповещениеОВыполнении = Неопределено)  Экспорт
	
	Если НЕ Подключен() Тогда
		Возврат;
	КонецЕсли;
	
	Если мЛокальныеКлиенты.Получить(ИдентфикаторКлиента) <> Неопределено И ОповещениеОВыполнении <> Неопределено Тогда
		мОповещенияКлиента = мОчередьОповещений.Получить(ИдентфикаторКлиента);
		Если мОповещенияКлиента = Неопределено Тогда
			мОповещенияКлиента = Новый Массив;
		КонецЕсли;
		ЭлементОчереди = Новый Соответствие;
		ЭлементОчереди.Вставить(Команда, ОповещениеОВыполнении);
		мОповещенияКлиента.Добавить(ЭлементОчереди);
	КонецЕсли;
	
	мВебСокет.КомандаСерверу( Команда, ПараметрыКоманды, XMLСтрока(ИдентфикаторКлиента));
	
КонецПроцедуры

Процедура ПолучитьПользователейВСети(ИдентфикаторКлиента, ФильтрПриложений = Неопределено,  ОповещениеОВыполнении = Неопределено) Экспорт
	
	Если НЕ Подключен() Тогда
		Возврат;
	КонецЕсли;
	
	Если мЛокальныеКлиенты.Получить(ИдентфикаторКлиента) <> Неопределено И ОповещениеОВыполнении <> Неопределено Тогда
		мОповещенияКлиента = мОчередьОповещений.Получить(ИдентфикаторКлиента);
		Если мОповещенияКлиента = Неопределено Тогда
			мОповещенияКлиента = Новый Массив;
		КонецЕсли;
		ЭлементОчереди = Новый Соответствие;
		ЭлементОчереди.Вставить("get_active_users", ОповещениеОВыполнении);
		мОповещенияКлиента.Добавить(ЭлементОчереди);
		мОчередьОповещений.Вставить(ИдентфикаторКлиента, мОповещенияКлиента);
	КонецЕсли;

	мВебСокет.ПолучитьПользователейВСети(ФильтрПриложений, XMLСтрока(ИдентфикаторКлиента));
	
КонецПроцедуры

Функция ПолучитьSha1(ИсходныеДанные) Экспорт
	Если мВебСокет <> Неопределено Тогда
		Возврат мВебСокет.ПолучитьSha1(ИсходныеДанные);
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция УстановитьТекущийДокумент(Форма) Экспорт
	Если мВебСокет <> Неопределено Тогда
		мВебСокет.ТекущийДокумент = Форма.Заголовок;
	КонецЕсли;	
КонецФункции

#КонецОбласти

#Область Инициализация

мВебСокет                             = Неопределено;
мОтключитьПубличныеОповещения         = Ложь;
мПриложенияДляОповещений              = "litescanner";
мИмяПриложения                        = "1c_litescanner_client";
//МетаданныеОбъекта                     = Неопределено;
//мСсылкаНаОбъект                       = Неопределено;
мИдентификаторФормыКакИсточникСобытия 	  = Истина;
мЛокальныеКлиенты					  = Новый Соответствие;
мОписаниеОповещенияОПодключении 	       = Неопределено;
мОповещениеООшибке					  = Неопределено;
мОчередьОповещений					  = Новый Соответствие; 
мИдентификаторУзла 					  = XMLСтрока(ПланыОбмена.Полный.ЭтотУзел());
мСтандартныйОбработчикШтрихкода	       = Ложь;

#КонецОбласти

#КонецЕсли
